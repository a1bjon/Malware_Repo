import javax.swing.*;
import java.util.Random;
import java.awt.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
// Program can't be terminated if executed
// with Robot code (You will have to turn off
// your computer)

public class Disrupter {

    private final String OS_VERSION;
    private final String ANSI_CYAN;
    private final String ANSI_RESET;
    private final Dimension displayResolution;

    private Disrupter() {
        this.OS_VERSION = System.getProperty("os.name");
        this.ANSI_CYAN = "\u001B[36m";
        this.ANSI_RESET = "\u001B[0m";
        this.displayResolution = Toolkit.getDefaultToolkit().getScreenSize();
    }

    private void execute() {
        for (int i = 5; i > 0; i--) {
            try {
                TimeUnit.SECONDS.sleep(1);
                System.out.println("Executing in: " + this.ANSI_CYAN + i + this.ANSI_RESET);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        while (true) {
            try {
                TimeUnit.MILLISECONDS.sleep(5);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            JWindow win = new JWindow();
            JLabel img = new JLabel(new ImageIcon("anon.png"));
            win.setSize(300, 189);
            img.setSize(300, 189);
            win.add(img);
            win.setLocation(new Random().nextInt((int) this.displayResolution.getWidth()), new Random().nextInt(
                    (int) this.displayResolution.getHeight()));
            win.setVisible(true);
            try {
                Robot robot = new Robot();
                robot.mouseMove(new Random().nextInt((int) this.displayResolution.getWidth()), new Random().nextInt(
                        (int) this.displayResolution.getHeight()));
            } catch (AWTException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        Disrupter disrupter = new Disrupter();

        switch (disrupter.OS_VERSION) {
            case "Windows XP":
            case "Windows 8.1":
            case "Windows 10":
            case "Windows 11":
                try {
                    ProcessBuilder pb = new ProcessBuilder("notepad", "what_have_you_done.txt");
                    pb.start();
                    TimeUnit.SECONDS.sleep(2);
                    ProcessBuilder pbs = new ProcessBuilder("taskkill", "/F", "/IM", "notepad.exe");
                    pbs.start();
                } catch (IOException | InterruptedException e) {
                    e.printStackTrace();
                }
                break;

            case "Mac OS X":
                try {
                    ProcessBuilder pb = new ProcessBuilder("open", "-a", "TextEdit", "what_have_you_done.txt");
                    pb.start();
                    TimeUnit.SECONDS.sleep(2);
                    ProcessBuilder pbs = new ProcessBuilder("pkill", "TextEdit.app");
                    pbs.start();
                } catch (IOException | InterruptedException e) {
                    e.printStackTrace();
                }
                break;

            case "Linux":
                try {
                    ProcessBuilder pb = new ProcessBuilder("gedit", "what_have_you_done.txt");
                    pb.start();
                    TimeUnit.SECONDS.sleep(2);
                    ProcessBuilder pbs = new ProcessBuilder("pkill", "gedit");
                    pbs.start();
                } catch (IOException | InterruptedException e) {
                    e.printStackTrace();
                }
                break;

            default:
                System.exit(1);
        }
        disrupter.execute();
    }
}