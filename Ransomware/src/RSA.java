import javax.crypto.*;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.util.Base64;

public class RSA {

    private PrivateKey privateKey;
    private PublicKey publicKey;
    private byte[] encryptedTextBytes;
    private String encryptedText;
    private String decryptedText;

    public void generateKeyPair(){
        try {
            KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
            generator.initialize(2048);
            KeyPair keyPair = generator.generateKeyPair();

            this.privateKey = keyPair.getPrivate();
            this.publicKey = keyPair.getPublic();
        }
        catch(NoSuchAlgorithmException e){
            e.printStackTrace();
        }
    }

    public String encrypt(String plainText){
        try {
            Cipher encryptCipher = Cipher.getInstance("RSA");
            encryptCipher.init(Cipher.ENCRYPT_MODE, this.publicKey);

            byte[] textBytes = plainText.getBytes(StandardCharsets.UTF_8);
            this.encryptedTextBytes = encryptCipher.doFinal(textBytes);

            this.encryptedText = Base64.getEncoder().encodeToString(encryptedTextBytes);
        }
        catch(InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException e){
            e.printStackTrace();
        }
        return this.encryptedText;
    }

    public String decrypt(String encryptedText){
        try {
            Cipher decryptCipher = Cipher.getInstance("RSA");
            decryptCipher.init(Cipher.DECRYPT_MODE, this.privateKey);

            byte[] decryptedTextBytes = decryptCipher.doFinal(this.encryptedTextBytes);
            this.decryptedText = new String(decryptedTextBytes, StandardCharsets.UTF_8);
        }

        catch(InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException e){
            e.printStackTrace();
        }
        return this.decryptedText;
    }
}
